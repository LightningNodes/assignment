{"ast":null,"code":"import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\nconst name = \"@firebase/installations\";\nconst version = \"0.6.6\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst PENDING_TIMEOUT_MS = 10000;\nconst PACKAGE_VERSION = \"w:\".concat(version);\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\nconst SERVICE = 'installations';\nconst SERVICE_NAME = 'Installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ERROR_DESCRIPTION_MAP = {\n  [\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"not-registered\" /* ErrorCode.NOT_REGISTERED */]: 'Firebase Installation is not registered.',\n  [\"installation-not-found\" /* ErrorCode.INSTALLATION_NOT_FOUND */]: 'Firebase Installation not found.',\n  [\"request-failed\" /* ErrorCode.REQUEST_FAILED */]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [\"app-offline\" /* ErrorCode.APP_OFFLINE */]: 'Could not process request. Application offline.',\n  [\"delete-pending-registration\" /* ErrorCode.DELETE_PENDING_REGISTRATION */]: \"Can't delete installation while there is a pending registration request.\"\n};\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\" /* ErrorCode.REQUEST_FAILED */);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getInstallationsEndpoint(_ref) {\n  let {\n    projectId\n  } = _ref;\n  return \"\".concat(INSTALLATIONS_API_URL, \"/projects/\").concat(projectId, \"/installations\");\n}\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2 /* RequestStatus.COMPLETED */,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\nasync function getErrorFromResponse(requestName, response) {\n  const responseJson = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(\"request-failed\" /* ErrorCode.REQUEST_FAILED */, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\nfunction getHeaders(_ref2) {\n  let {\n    apiKey\n  } = _ref2;\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\nfunction getHeadersWithAuth(appConfig, _ref3) {\n  let {\n    refreshToken\n  } = _ref3;\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\nasync function retryIfServerError(fn) {\n  const result = await fn();\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n  return result;\n}\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\nfunction getAuthorizationHeader(refreshToken) {\n  return \"\".concat(INTERNAL_AUTH_VERSION, \" \").concat(refreshToken);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nasync function createInstallationRequest(_ref4, _ref5) {\n  let {\n    appConfig,\n    heartbeatServiceProvider\n  } = _ref4;\n  let {\n    fid\n  } = _ref5;\n  const endpoint = getInstallationsEndpoint(appConfig);\n  const headers = getHeaders(appConfig);\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n  const request = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue = await response.json();\n    const registeredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: 2 /* RequestStatus.COMPLETED */,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Returns a promise that resolves after given time passes. */\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction bufferToBase64UrlSafe(array) {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nconst INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto = self.crypto || self.msCrypto;\n    crypto.getRandomValues(fidByteArray);\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + fidByteArray[0] % 0b00010000;\n    const fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray) {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Returns a string key that can be used to identify the app. */\nfunction getKey(appConfig) {\n  return \"\".concat(appConfig.appName, \"!\").concat(appConfig.appId);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\nfunction fidChanged(appConfig, fid) {\n  const key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  const key = getKey(appConfig);\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\nfunction removeCallback(appConfig, callback) {\n  const key = getKey(appConfig);\n  const callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    return;\n  }\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\nfunction callFidChangeCallbacks(key, fid) {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\nfunction broadcastFidChange(key, fid) {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({\n      key,\n      fid\n    });\n  }\n  closeBroadcastChannel();\n}\nlet broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\nlet dbPromise = null;\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\nasync function set(appConfig, value) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.done;\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n  return value;\n}\n/** Removes record(s) from the objectStore that match the given key. */\nasync function remove(appConfig) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\nasync function update(appConfig, updateFn) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await store.get(key);\n  const newValue = updateFn(oldValue);\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n  return newValue;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\nasync function getInstallationEntry(installations) {\n  let registrationPromise;\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return {\n      installationEntry: await registrationPromise\n    };\n  }\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  const entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0 /* RequestStatus.NOT_STARTED */\n  };\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\n  if (installationEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */));\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1 /* RequestStatus.IN_PROGRESS */,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(installations, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return {\n      installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(installations, installationEntry) {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: 0 /* RequestStatus.NOT_STARTED */\n      });\n    }\n    throw e;\n  }\n}\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(installations) {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n  let entry = await updateInstallationRequest(installations.appConfig);\n  while (entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n    // createInstallation request still in progress.\n    await sleep(100);\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n  if (entry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(installations);\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry;\n    }\n  }\n  return entry;\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\" /* ErrorCode.INSTALLATION_NOT_FOUND */);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0 /* RequestStatus.NOT_STARTED */\n    };\n  }\n  return entry;\n}\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */ && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nasync function generateAuthTokenRequest(_ref6, installationEntry) {\n  let {\n    appConfig,\n    heartbeatServiceProvider\n  } = _ref6;\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n  const request = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue = await response.json();\n    const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\nfunction getGenerateAuthTokenEndpoint(appConfig, _ref7) {\n  let {\n    fid\n  } = _ref7;\n  return \"\".concat(getInstallationsEndpoint(appConfig), \"/\").concat(fid, \"/authTokens:generate\");\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\nasync function refreshAuthToken(installations) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let tokenPromise;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\" /* ErrorCode.NOT_REGISTERED */);\n    }\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */);\n      }\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n  const authToken = tokenPromise ? await tokenPromise : entry.authToken;\n  return authToken;\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === 0 /* RequestStatus.NOT_STARTED */) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\" /* ErrorCode.NOT_REGISTERED */);\n    }\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return Object.assign(Object.assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0 /* RequestStatus.NOT_STARTED */\n        }\n      });\n    }\n    return oldEntry;\n  });\n}\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\n  try {\n    const authToken = await generateAuthTokenRequest(installations, installationEntry);\n    const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n      authToken\n    });\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (isServerError(e) && (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n        authToken: {\n          requestStatus: 0 /* RequestStatus.NOT_STARTED */\n        }\n      });\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2 /* RequestStatus.COMPLETED */;\n}\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2 /* RequestStatus.COMPLETED */ && !isAuthTokenExpired(authToken);\n}\nfunction isAuthTokenExpired(authToken) {\n  const now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  const inProgressAuthToken = {\n    requestStatus: 1 /* RequestStatus.IN_PROGRESS */,\n    requestTime: Date.now()\n  };\n  return Object.assign(Object.assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */ && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\nasync function getId(installations) {\n  const installationsImpl = installations;\n  const {\n    installationEntry,\n    registrationPromise\n  } = await getInstallationEntry(installationsImpl);\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n  return installationEntry.fid;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\nasync function getToken(installations) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const installationsImpl = installations;\n  await completeInstallationRegistration(installationsImpl);\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\nasync function completeInstallationRegistration(installations) {\n  const {\n    registrationPromise\n  } = await getInstallationEntry(installations);\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nasync function deleteInstallationRequest(appConfig, installationEntry) {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request = {\n    method: 'DELETE',\n    headers\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\nfunction getDeleteEndpoint(appConfig, _ref8) {\n  let {\n    fid\n  } = _ref8;\n  return \"\".concat(getInstallationsEndpoint(appConfig), \"/\").concat(fid);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\nasync function deleteInstallations(installations) {\n  const {\n    appConfig\n  } = installations;\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n  if (entry) {\n    if (entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(\"delete-pending-registration\" /* ErrorCode.DELETE_PENDING_REGISTRATION */);\n    } else if (entry.registrationStatus === 2 /* RequestStatus.COMPLETED */) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\nfunction onIdChange(installations, callback) {\n  const {\n    appConfig\n  } = installations;\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\nfunction getInstallations() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n  // Required app config keys\n  const configKeys = ['projectId', 'apiKey', 'appId'];\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */, {\n    valueName\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\nconst publicFactory = container => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n  const installationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\nconst internalFactory = container => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n  const installationsInternal = {\n    getId: () => getId(installations),\n    getToken: forceRefresh => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\nfunction registerInstallations() {\n  _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\" /* ComponentType.PUBLIC */));\n  _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\n}\n\n/**\r\n * The Firebase Installations Web SDK.\r\n * This SDK does not work in a Node.js environment.\r\n *\r\n * @packageDocumentation\r\n */\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, 'esm2017');\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };","map":{"version":3,"names":["PENDING_TIMEOUT_MS","PACKAGE_VERSION","concat","version","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","isServerError","error","FirebaseError","code","includes","getInstallationsEndpoint","_ref","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","getExpiresInFromResponseExpiresIn","creationTime","Date","now","getErrorFromResponse","requestName","responseJson","json","errorData","create","serverCode","serverMessage","message","serverStatus","status","getHeaders","_ref2","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","_ref3","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","result","responseExpiresIn","Number","replace","createInstallationRequest","_ref4","_ref5","heartbeatServiceProvider","fid","endpoint","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","fetch","ok","responseValue","registeredInstallationEntry","registrationStatus","authToken","sleep","ms","Promise","resolve","setTimeout","bufferToBase64UrlSafe","array","b64","btoa","String","fromCharCode","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto","self","msCrypto","getRandomValues","encode","test","_a","b64String","substr","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","broadcastFidChange","addCallback","callback","getBroadcastChannel","callbackSet","get","Set","set","add","removeCallback","delete","size","closeBroadcastChannel","callbacks","channel","postMessage","broadcastChannel","BroadcastChannel","onmessage","e","data","close","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","openDB","upgrade","db","oldVersion","createObjectStore","value","tx","transaction","objectStore","oldValue","put","done","remove","update","updateFn","store","newValue","undefined","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","updateOrCreateInstallationEntry","entryWithPromise","triggerRegistrationIfNecessary","entry","clearTimedOutRequest","navigator","onLine","registrationPromiseWithError","reject","inProgressEntry","registrationTime","registerInstallation","waitUntilFidRegistration","customData","updateInstallationRequest","hasInstallationRequestTimedOut","generateAuthTokenRequest","_ref6","getGenerateAuthTokenEndpoint","installation","completedAuthToken","_ref7","refreshAuthToken","forceRefresh","arguments","length","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenValid","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","updateAuthTokenRequest","hasAuthTokenRequestTimedOut","Object","assign","updatedInstallationEntry","isAuthTokenExpired","inProgressAuthToken","requestTime","getId","installationsImpl","catch","console","getToken","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","_ref8","deleteInstallations","onIdChange","getInstallations","app","getApp","_getProvider","extractAppConfig","options","getMissingValueError","name","configKeys","keyName","valueName","INSTALLATIONS_NAME","INSTALLATIONS_NAME_INTERNAL","publicFactory","container","getProvider","_delete","internalFactory","installationsInternal","registerInstallations","_registerComponent","Component","registerVersion"],"sources":["/home/shashwat/pi42/node_modules/@firebase/installations/src/util/constants.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/util/errors.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/functions/common.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/functions/create-installation-request.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/util/sleep.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/helpers/generate-fid.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/util/get-key.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/helpers/fid-changed.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/helpers/idb-manager.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/helpers/get-installation-entry.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/functions/generate-auth-token-request.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/helpers/refresh-auth-token.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/api/get-id.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/api/get-token.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/functions/delete-installation-request.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/api/delete-installations.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/api/on-id-change.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/api/get-installations.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/helpers/extract-app-config.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/functions/config.ts","/home/shashwat/pi42/node_modules/@firebase/installations/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * The Firebase Installations Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}